# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pydof18
else:
    import _pydof18

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pydof18.delete_SwigPyIterator

    def value(self):
        return _pydof18.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pydof18.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pydof18.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pydof18.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pydof18.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pydof18.SwigPyIterator_copy(self)

    def next(self):
        return _pydof18.SwigPyIterator_next(self)

    def __next__(self):
        return _pydof18.SwigPyIterator___next__(self)

    def previous(self):
        return _pydof18.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pydof18.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pydof18.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pydof18.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pydof18.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pydof18.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pydof18.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pydof18.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pydof18:
_pydof18.SwigPyIterator_swigregister(SwigPyIterator)

class vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pydof18.vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pydof18.vector_double___nonzero__(self)

    def __bool__(self):
        return _pydof18.vector_double___bool__(self)

    def __len__(self):
        return _pydof18.vector_double___len__(self)

    def __getslice__(self, i, j):
        return _pydof18.vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pydof18.vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pydof18.vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pydof18.vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pydof18.vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pydof18.vector_double___setitem__(self, *args)

    def pop(self):
        return _pydof18.vector_double_pop(self)

    def append(self, x):
        return _pydof18.vector_double_append(self, x)

    def empty(self):
        return _pydof18.vector_double_empty(self)

    def size(self):
        return _pydof18.vector_double_size(self)

    def swap(self, v):
        return _pydof18.vector_double_swap(self, v)

    def begin(self):
        return _pydof18.vector_double_begin(self)

    def end(self):
        return _pydof18.vector_double_end(self)

    def rbegin(self):
        return _pydof18.vector_double_rbegin(self)

    def rend(self):
        return _pydof18.vector_double_rend(self)

    def clear(self):
        return _pydof18.vector_double_clear(self)

    def get_allocator(self):
        return _pydof18.vector_double_get_allocator(self)

    def pop_back(self):
        return _pydof18.vector_double_pop_back(self)

    def erase(self, *args):
        return _pydof18.vector_double_erase(self, *args)

    def __init__(self, *args):
        _pydof18.vector_double_swiginit(self, _pydof18.new_vector_double(*args))

    def push_back(self, x):
        return _pydof18.vector_double_push_back(self, x)

    def front(self):
        return _pydof18.vector_double_front(self)

    def back(self):
        return _pydof18.vector_double_back(self)

    def assign(self, n, x):
        return _pydof18.vector_double_assign(self, n, x)

    def resize(self, *args):
        return _pydof18.vector_double_resize(self, *args)

    def insert(self, *args):
        return _pydof18.vector_double_insert(self, *args)

    def reserve(self, n):
        return _pydof18.vector_double_reserve(self, n)

    def capacity(self):
        return _pydof18.vector_double_capacity(self)
    __swig_destroy__ = _pydof18.delete_vector_double

# Register vector_double in _pydof18:
_pydof18.vector_double_swigregister(vector_double)

class matrix_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pydof18.matrix_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pydof18.matrix_double___nonzero__(self)

    def __bool__(self):
        return _pydof18.matrix_double___bool__(self)

    def __len__(self):
        return _pydof18.matrix_double___len__(self)

    def __getslice__(self, i, j):
        return _pydof18.matrix_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pydof18.matrix_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pydof18.matrix_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pydof18.matrix_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pydof18.matrix_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pydof18.matrix_double___setitem__(self, *args)

    def pop(self):
        return _pydof18.matrix_double_pop(self)

    def append(self, x):
        return _pydof18.matrix_double_append(self, x)

    def empty(self):
        return _pydof18.matrix_double_empty(self)

    def size(self):
        return _pydof18.matrix_double_size(self)

    def swap(self, v):
        return _pydof18.matrix_double_swap(self, v)

    def begin(self):
        return _pydof18.matrix_double_begin(self)

    def end(self):
        return _pydof18.matrix_double_end(self)

    def rbegin(self):
        return _pydof18.matrix_double_rbegin(self)

    def rend(self):
        return _pydof18.matrix_double_rend(self)

    def clear(self):
        return _pydof18.matrix_double_clear(self)

    def get_allocator(self):
        return _pydof18.matrix_double_get_allocator(self)

    def pop_back(self):
        return _pydof18.matrix_double_pop_back(self)

    def erase(self, *args):
        return _pydof18.matrix_double_erase(self, *args)

    def __init__(self, *args):
        _pydof18.matrix_double_swiginit(self, _pydof18.new_matrix_double(*args))

    def push_back(self, x):
        return _pydof18.matrix_double_push_back(self, x)

    def front(self):
        return _pydof18.matrix_double_front(self)

    def back(self):
        return _pydof18.matrix_double_back(self)

    def assign(self, n, x):
        return _pydof18.matrix_double_assign(self, n, x)

    def resize(self, *args):
        return _pydof18.matrix_double_resize(self, *args)

    def insert(self, *args):
        return _pydof18.matrix_double_insert(self, *args)

    def reserve(self, n):
        return _pydof18.matrix_double_reserve(self, n)

    def capacity(self):
        return _pydof18.matrix_double_capacity(self)
    __swig_destroy__ = _pydof18.delete_matrix_double

# Register matrix_double in _pydof18:
_pydof18.matrix_double_swigregister(matrix_double)

class DriverData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pydof18.DriverData_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pydof18.DriverData___nonzero__(self)

    def __bool__(self):
        return _pydof18.DriverData___bool__(self)

    def __len__(self):
        return _pydof18.DriverData___len__(self)

    def __getslice__(self, i, j):
        return _pydof18.DriverData___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pydof18.DriverData___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pydof18.DriverData___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pydof18.DriverData___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pydof18.DriverData___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pydof18.DriverData___setitem__(self, *args)

    def pop(self):
        return _pydof18.DriverData_pop(self)

    def append(self, x):
        return _pydof18.DriverData_append(self, x)

    def empty(self):
        return _pydof18.DriverData_empty(self)

    def size(self):
        return _pydof18.DriverData_size(self)

    def swap(self, v):
        return _pydof18.DriverData_swap(self, v)

    def begin(self):
        return _pydof18.DriverData_begin(self)

    def end(self):
        return _pydof18.DriverData_end(self)

    def rbegin(self):
        return _pydof18.DriverData_rbegin(self)

    def rend(self):
        return _pydof18.DriverData_rend(self)

    def clear(self):
        return _pydof18.DriverData_clear(self)

    def get_allocator(self):
        return _pydof18.DriverData_get_allocator(self)

    def pop_back(self):
        return _pydof18.DriverData_pop_back(self)

    def erase(self, *args):
        return _pydof18.DriverData_erase(self, *args)

    def __init__(self, *args):
        _pydof18.DriverData_swiginit(self, _pydof18.new_DriverData(*args))

    def push_back(self, x):
        return _pydof18.DriverData_push_back(self, x)

    def front(self):
        return _pydof18.DriverData_front(self)

    def back(self):
        return _pydof18.DriverData_back(self)

    def assign(self, n, x):
        return _pydof18.DriverData_assign(self, n, x)

    def resize(self, *args):
        return _pydof18.DriverData_resize(self, *args)

    def insert(self, *args):
        return _pydof18.DriverData_insert(self, *args)

    def reserve(self, n):
        return _pydof18.DriverData_reserve(self, n)

    def capacity(self):
        return _pydof18.DriverData_capacity(self)
    __swig_destroy__ = _pydof18.delete_DriverData

# Register DriverData in _pydof18:
_pydof18.DriverData_swigregister(DriverData)

class PathData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pydof18.PathData_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pydof18.PathData___nonzero__(self)

    def __bool__(self):
        return _pydof18.PathData___bool__(self)

    def __len__(self):
        return _pydof18.PathData___len__(self)

    def __getslice__(self, i, j):
        return _pydof18.PathData___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pydof18.PathData___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pydof18.PathData___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pydof18.PathData___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pydof18.PathData___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pydof18.PathData___setitem__(self, *args)

    def pop(self):
        return _pydof18.PathData_pop(self)

    def append(self, x):
        return _pydof18.PathData_append(self, x)

    def empty(self):
        return _pydof18.PathData_empty(self)

    def size(self):
        return _pydof18.PathData_size(self)

    def swap(self, v):
        return _pydof18.PathData_swap(self, v)

    def begin(self):
        return _pydof18.PathData_begin(self)

    def end(self):
        return _pydof18.PathData_end(self)

    def rbegin(self):
        return _pydof18.PathData_rbegin(self)

    def rend(self):
        return _pydof18.PathData_rend(self)

    def clear(self):
        return _pydof18.PathData_clear(self)

    def get_allocator(self):
        return _pydof18.PathData_get_allocator(self)

    def pop_back(self):
        return _pydof18.PathData_pop_back(self)

    def erase(self, *args):
        return _pydof18.PathData_erase(self, *args)

    def __init__(self, *args):
        _pydof18.PathData_swiginit(self, _pydof18.new_PathData(*args))

    def push_back(self, x):
        return _pydof18.PathData_push_back(self, x)

    def front(self):
        return _pydof18.PathData_front(self)

    def back(self):
        return _pydof18.PathData_back(self)

    def assign(self, n, x):
        return _pydof18.PathData_assign(self, n, x)

    def resize(self, *args):
        return _pydof18.PathData_resize(self, *args)

    def insert(self, *args):
        return _pydof18.PathData_insert(self, *args)

    def reserve(self, n):
        return _pydof18.PathData_reserve(self, n)

    def capacity(self):
        return _pydof18.PathData_capacity(self)
    __swig_destroy__ = _pydof18.delete_PathData

# Register PathData in _pydof18:
_pydof18.PathData_swigregister(PathData)

class DriverInput(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pydof18.DriverInput_swiginit(self, _pydof18.new_DriverInput(*args))

    @staticmethod
    def compare(a, b):
        return _pydof18.DriverInput_compare(a, b)
    m_time = property(_pydof18.DriverInput_m_time_get, _pydof18.DriverInput_m_time_set)
    m_steering = property(_pydof18.DriverInput_m_steering_get, _pydof18.DriverInput_m_steering_set)
    m_throttle = property(_pydof18.DriverInput_m_throttle_get, _pydof18.DriverInput_m_throttle_set)
    m_braking = property(_pydof18.DriverInput_m_braking_get, _pydof18.DriverInput_m_braking_set)
    __swig_destroy__ = _pydof18.delete_DriverInput

# Register DriverInput in _pydof18:
_pydof18.DriverInput_swigregister(DriverInput)
cvar = _pydof18.cvar
C_PI = cvar.C_PI
C_2PI = cvar.C_2PI
G = cvar.G
rpm2rad = cvar.rpm2rad

def DriverInput_compare(a, b):
    return _pydof18.DriverInput_compare(a, b)


def LoadDriverData(m_data, filename):
    return _pydof18.LoadDriverData(m_data, filename)

def GetDriverInput(time, driver_data):
    return _pydof18.GetDriverInput(time, driver_data)
class PathPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pydof18.PathPoint_swiginit(self, _pydof18.new_PathPoint(*args))

    @staticmethod
    def compare(a, b):
        return _pydof18.PathPoint_compare(a, b)
    m_t = property(_pydof18.PathPoint_m_t_get, _pydof18.PathPoint_m_t_set)
    m_x = property(_pydof18.PathPoint_m_x_get, _pydof18.PathPoint_m_x_set)
    m_y = property(_pydof18.PathPoint_m_y_get, _pydof18.PathPoint_m_y_set)
    __swig_destroy__ = _pydof18.delete_PathPoint

# Register PathPoint in _pydof18:
_pydof18.PathPoint_swigregister(PathPoint)

def PathPoint_compare(a, b):
    return _pydof18.PathPoint_compare(a, b)


def LoadPath(path, filename):
    return _pydof18.LoadPath(path, filename)

def GetPathPoint(time, path):
    return _pydof18.GetPathPoint(time, path)
class MapEntry(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pydof18.MapEntry_swiginit(self, _pydof18.new_MapEntry(*args))

    @staticmethod
    def compare(a, b):
        return _pydof18.MapEntry_compare(a, b)
    _x = property(_pydof18.MapEntry__x_get, _pydof18.MapEntry__x_set)
    _y = property(_pydof18.MapEntry__y_get, _pydof18.MapEntry__y_set)
    __swig_destroy__ = _pydof18.delete_MapEntry

# Register MapEntry in _pydof18:
_pydof18.MapEntry_swigregister(MapEntry)

def MapEntry_compare(a, b):
    return _pydof18.MapEntry_compare(a, b)


def getMapY(map, x):
    return _pydof18.getMapY(map, x)

def InterpL(fz, w1, w2, pn):
    return _pydof18.InterpL(fz, w1, w2, pn)

def InterpQ(fz, w1, w2, pn):
    return _pydof18.InterpQ(fz, w1, w2, pn)

def sineStep(x, x1, y1, x2, y2):
    return _pydof18.sineStep(x, x1, y1, x2, y2)
class CSV_writer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pydof18.CSV_writer_swiginit(self, _pydof18.new_CSV_writer(*args))
    __swig_destroy__ = _pydof18.delete_CSV_writer

    def write_to_file(self, *args):
        return _pydof18.CSV_writer_write_to_file(self, *args)

    def clearData(self):
        return _pydof18.CSV_writer_clearData(self)

    def delim(self):
        return _pydof18.CSV_writer_delim(self)

    def stream(self):
        return _pydof18.CSV_writer_stream(self)

    def __lshift__(self, *args):
        return _pydof18.CSV_writer___lshift__(self, *args)

# Register CSV_writer in _pydof18:
_pydof18.CSV_writer_swigregister(CSV_writer)

class TMeasyParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pydof18.TMeasyParam_swiginit(self, _pydof18.new_TMeasyParam(*args))
    _jw = property(_pydof18.TMeasyParam__jw_get, _pydof18.TMeasyParam__jw_set)
    _rr = property(_pydof18.TMeasyParam__rr_get, _pydof18.TMeasyParam__rr_set)
    _mu = property(_pydof18.TMeasyParam__mu_get, _pydof18.TMeasyParam__mu_set)
    _r0 = property(_pydof18.TMeasyParam__r0_get, _pydof18.TMeasyParam__r0_set)
    _pn = property(_pydof18.TMeasyParam__pn_get, _pydof18.TMeasyParam__pn_set)
    _pnmax = property(_pydof18.TMeasyParam__pnmax_get, _pydof18.TMeasyParam__pnmax_set)
    _cx = property(_pydof18.TMeasyParam__cx_get, _pydof18.TMeasyParam__cx_set)
    _cy = property(_pydof18.TMeasyParam__cy_get, _pydof18.TMeasyParam__cy_set)
    _kt = property(_pydof18.TMeasyParam__kt_get, _pydof18.TMeasyParam__kt_set)
    _dx = property(_pydof18.TMeasyParam__dx_get, _pydof18.TMeasyParam__dx_set)
    _dy = property(_pydof18.TMeasyParam__dy_get, _pydof18.TMeasyParam__dy_set)
    _rdyncoPn = property(_pydof18.TMeasyParam__rdyncoPn_get, _pydof18.TMeasyParam__rdyncoPn_set)
    _rdyncoP2n = property(_pydof18.TMeasyParam__rdyncoP2n_get, _pydof18.TMeasyParam__rdyncoP2n_set)
    _fzRdynco = property(_pydof18.TMeasyParam__fzRdynco_get, _pydof18.TMeasyParam__fzRdynco_set)
    _rdyncoCrit = property(_pydof18.TMeasyParam__rdyncoCrit_get, _pydof18.TMeasyParam__rdyncoCrit_set)
    _dfx0Pn = property(_pydof18.TMeasyParam__dfx0Pn_get, _pydof18.TMeasyParam__dfx0Pn_set)
    _dfx0P2n = property(_pydof18.TMeasyParam__dfx0P2n_get, _pydof18.TMeasyParam__dfx0P2n_set)
    _fxmPn = property(_pydof18.TMeasyParam__fxmPn_get, _pydof18.TMeasyParam__fxmPn_set)
    _fxmP2n = property(_pydof18.TMeasyParam__fxmP2n_get, _pydof18.TMeasyParam__fxmP2n_set)
    _fxsPn = property(_pydof18.TMeasyParam__fxsPn_get, _pydof18.TMeasyParam__fxsPn_set)
    _fxsP2n = property(_pydof18.TMeasyParam__fxsP2n_get, _pydof18.TMeasyParam__fxsP2n_set)
    _sxmPn = property(_pydof18.TMeasyParam__sxmPn_get, _pydof18.TMeasyParam__sxmPn_set)
    _sxmP2n = property(_pydof18.TMeasyParam__sxmP2n_get, _pydof18.TMeasyParam__sxmP2n_set)
    _sxsPn = property(_pydof18.TMeasyParam__sxsPn_get, _pydof18.TMeasyParam__sxsPn_set)
    _sxsP2n = property(_pydof18.TMeasyParam__sxsP2n_get, _pydof18.TMeasyParam__sxsP2n_set)
    _dfy0Pn = property(_pydof18.TMeasyParam__dfy0Pn_get, _pydof18.TMeasyParam__dfy0Pn_set)
    _dfy0P2n = property(_pydof18.TMeasyParam__dfy0P2n_get, _pydof18.TMeasyParam__dfy0P2n_set)
    _fymPn = property(_pydof18.TMeasyParam__fymPn_get, _pydof18.TMeasyParam__fymPn_set)
    _fymP2n = property(_pydof18.TMeasyParam__fymP2n_get, _pydof18.TMeasyParam__fymP2n_set)
    _fysPn = property(_pydof18.TMeasyParam__fysPn_get, _pydof18.TMeasyParam__fysPn_set)
    _fysP2n = property(_pydof18.TMeasyParam__fysP2n_get, _pydof18.TMeasyParam__fysP2n_set)
    _symPn = property(_pydof18.TMeasyParam__symPn_get, _pydof18.TMeasyParam__symPn_set)
    _symP2n = property(_pydof18.TMeasyParam__symP2n_get, _pydof18.TMeasyParam__symP2n_set)
    _sysPn = property(_pydof18.TMeasyParam__sysPn_get, _pydof18.TMeasyParam__sysPn_set)
    _sysP2n = property(_pydof18.TMeasyParam__sysP2n_get, _pydof18.TMeasyParam__sysP2n_set)
    _step = property(_pydof18.TMeasyParam__step_get, _pydof18.TMeasyParam__step_set)
    __swig_destroy__ = _pydof18.delete_TMeasyParam

# Register TMeasyParam in _pydof18:
_pydof18.TMeasyParam_swigregister(TMeasyParam)

class TMeasyState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pydof18.TMeasyState_swiginit(self, _pydof18.new_TMeasyState(*args))
    _xe = property(_pydof18.TMeasyState__xe_get, _pydof18.TMeasyState__xe_set)
    _ye = property(_pydof18.TMeasyState__ye_get, _pydof18.TMeasyState__ye_set)
    _xedot = property(_pydof18.TMeasyState__xedot_get, _pydof18.TMeasyState__xedot_set)
    _yedot = property(_pydof18.TMeasyState__yedot_get, _pydof18.TMeasyState__yedot_set)
    _omega = property(_pydof18.TMeasyState__omega_get, _pydof18.TMeasyState__omega_set)
    _dOmega = property(_pydof18.TMeasyState__dOmega_get, _pydof18.TMeasyState__dOmega_set)
    _xt = property(_pydof18.TMeasyState__xt_get, _pydof18.TMeasyState__xt_set)
    _rStat = property(_pydof18.TMeasyState__rStat_get, _pydof18.TMeasyState__rStat_set)
    _fx = property(_pydof18.TMeasyState__fx_get, _pydof18.TMeasyState__fx_set)
    _fy = property(_pydof18.TMeasyState__fy_get, _pydof18.TMeasyState__fy_set)
    _fz = property(_pydof18.TMeasyState__fz_get, _pydof18.TMeasyState__fz_set)
    _vsx = property(_pydof18.TMeasyState__vsx_get, _pydof18.TMeasyState__vsx_set)
    _vsy = property(_pydof18.TMeasyState__vsy_get, _pydof18.TMeasyState__vsy_set)
    _My = property(_pydof18.TMeasyState__My_get, _pydof18.TMeasyState__My_set)
    _engTor = property(_pydof18.TMeasyState__engTor_get, _pydof18.TMeasyState__engTor_set)
    __swig_destroy__ = _pydof18.delete_TMeasyState

# Register TMeasyState in _pydof18:
_pydof18.TMeasyState_swigregister(TMeasyState)

class VehicleParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pydof18.VehicleParam_swiginit(self, _pydof18.new_VehicleParam(*args))
    _a = property(_pydof18.VehicleParam__a_get, _pydof18.VehicleParam__a_set)
    _b = property(_pydof18.VehicleParam__b_get, _pydof18.VehicleParam__b_set)
    _h = property(_pydof18.VehicleParam__h_get, _pydof18.VehicleParam__h_set)
    _m = property(_pydof18.VehicleParam__m_get, _pydof18.VehicleParam__m_set)
    _jz = property(_pydof18.VehicleParam__jz_get, _pydof18.VehicleParam__jz_set)
    _jx = property(_pydof18.VehicleParam__jx_get, _pydof18.VehicleParam__jx_set)
    _jxz = property(_pydof18.VehicleParam__jxz_get, _pydof18.VehicleParam__jxz_set)
    _cf = property(_pydof18.VehicleParam__cf_get, _pydof18.VehicleParam__cf_set)
    _cr = property(_pydof18.VehicleParam__cr_get, _pydof18.VehicleParam__cr_set)
    _muf = property(_pydof18.VehicleParam__muf_get, _pydof18.VehicleParam__muf_set)
    _mur = property(_pydof18.VehicleParam__mur_get, _pydof18.VehicleParam__mur_set)
    _hrcf = property(_pydof18.VehicleParam__hrcf_get, _pydof18.VehicleParam__hrcf_set)
    _hrcr = property(_pydof18.VehicleParam__hrcr_get, _pydof18.VehicleParam__hrcr_set)
    _krof = property(_pydof18.VehicleParam__krof_get, _pydof18.VehicleParam__krof_set)
    _kror = property(_pydof18.VehicleParam__kror_get, _pydof18.VehicleParam__kror_set)
    _brof = property(_pydof18.VehicleParam__brof_get, _pydof18.VehicleParam__brof_set)
    _bror = property(_pydof18.VehicleParam__bror_get, _pydof18.VehicleParam__bror_set)
    _nonLinearSteer = property(_pydof18.VehicleParam__nonLinearSteer_get, _pydof18.VehicleParam__nonLinearSteer_set)
    _steerMap = property(_pydof18.VehicleParam__steerMap_get, _pydof18.VehicleParam__steerMap_set)
    _maxSteer = property(_pydof18.VehicleParam__maxSteer_get, _pydof18.VehicleParam__maxSteer_set)
    _crankInertia = property(_pydof18.VehicleParam__crankInertia_get, _pydof18.VehicleParam__crankInertia_set)
    _gearRatios = property(_pydof18.VehicleParam__gearRatios_get, _pydof18.VehicleParam__gearRatios_set)
    _tcbool = property(_pydof18.VehicleParam__tcbool_get, _pydof18.VehicleParam__tcbool_set)
    _maxBrakeTorque = property(_pydof18.VehicleParam__maxBrakeTorque_get, _pydof18.VehicleParam__maxBrakeTorque_set)
    _c1 = property(_pydof18.VehicleParam__c1_get, _pydof18.VehicleParam__c1_set)
    _c0 = property(_pydof18.VehicleParam__c0_get, _pydof18.VehicleParam__c0_set)
    _step = property(_pydof18.VehicleParam__step_get, _pydof18.VehicleParam__step_set)
    _throttleMod = property(_pydof18.VehicleParam__throttleMod_get, _pydof18.VehicleParam__throttleMod_set)
    _powertrainMap = property(_pydof18.VehicleParam__powertrainMap_get, _pydof18.VehicleParam__powertrainMap_set)
    _lossesMap = property(_pydof18.VehicleParam__lossesMap_get, _pydof18.VehicleParam__lossesMap_set)
    _CFmap = property(_pydof18.VehicleParam__CFmap_get, _pydof18.VehicleParam__CFmap_set)
    _TRmap = property(_pydof18.VehicleParam__TRmap_get, _pydof18.VehicleParam__TRmap_set)
    _driveType = property(_pydof18.VehicleParam__driveType_get, _pydof18.VehicleParam__driveType_set)
    _whichWheels = property(_pydof18.VehicleParam__whichWheels_get, _pydof18.VehicleParam__whichWheels_set)
    _shiftMap = property(_pydof18.VehicleParam__shiftMap_get, _pydof18.VehicleParam__shiftMap_set)
    __swig_destroy__ = _pydof18.delete_VehicleParam

# Register VehicleParam in _pydof18:
_pydof18.VehicleParam_swigregister(VehicleParam)

class VehicleState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pydof18.VehicleState_swiginit(self, _pydof18.new_VehicleState(*args))
    _x = property(_pydof18.VehicleState__x_get, _pydof18.VehicleState__x_set)
    _y = property(_pydof18.VehicleState__y_get, _pydof18.VehicleState__y_set)
    _dx = property(_pydof18.VehicleState__dx_get, _pydof18.VehicleState__dx_set)
    _dy = property(_pydof18.VehicleState__dy_get, _pydof18.VehicleState__dy_set)
    _u = property(_pydof18.VehicleState__u_get, _pydof18.VehicleState__u_set)
    _v = property(_pydof18.VehicleState__v_get, _pydof18.VehicleState__v_set)
    _psi = property(_pydof18.VehicleState__psi_get, _pydof18.VehicleState__psi_set)
    _wz = property(_pydof18.VehicleState__wz_get, _pydof18.VehicleState__wz_set)
    _phi = property(_pydof18.VehicleState__phi_get, _pydof18.VehicleState__phi_set)
    _wx = property(_pydof18.VehicleState__wx_get, _pydof18.VehicleState__wx_set)
    _udot = property(_pydof18.VehicleState__udot_get, _pydof18.VehicleState__udot_set)
    _vdot = property(_pydof18.VehicleState__vdot_get, _pydof18.VehicleState__vdot_set)
    _wxdot = property(_pydof18.VehicleState__wxdot_get, _pydof18.VehicleState__wxdot_set)
    _wzdot = property(_pydof18.VehicleState__wzdot_get, _pydof18.VehicleState__wzdot_set)
    _tor = property(_pydof18.VehicleState__tor_get, _pydof18.VehicleState__tor_set)
    _crankOmega = property(_pydof18.VehicleState__crankOmega_get, _pydof18.VehicleState__crankOmega_set)
    _dOmega_crank = property(_pydof18.VehicleState__dOmega_crank_get, _pydof18.VehicleState__dOmega_crank_set)
    _current_gr = property(_pydof18.VehicleState__current_gr_get, _pydof18.VehicleState__current_gr_set)
    __swig_destroy__ = _pydof18.delete_VehicleState

# Register VehicleState in _pydof18:
_pydof18.VehicleState_swigregister(VehicleState)


def driveTorque(v_params, throttle, omega):
    return _pydof18.driveTorque(v_params, throttle, omega)

def brakeTorque(v_params, brake):
    return _pydof18.brakeTorque(v_params, brake)

def differentialSplit(torque, max_bias, speed_left, speed_right, torque_left, torque_right):
    return _pydof18.differentialSplit(torque, max_bias, speed_left, speed_right, torque_left, torque_right)

def setVehParamsJSON(v_params, fileName):
    return _pydof18.setVehParamsJSON(v_params, fileName)

def vehToTireTransform(tirelf_st, tirerf_st, tirelr_st, tirerr_st, v_states, loads, v_params, steering):
    return _pydof18.vehToTireTransform(tirelf_st, tirerf_st, tirelr_st, tirerr_st, v_states, loads, v_params, steering)

def tireToVehTransform(tirelf_st, tirerf_st, tirelr_st, tirerr_st, v_states, v_params, steering):
    return _pydof18.tireToVehTransform(tirelf_st, tirerf_st, tirelr_st, tirerr_st, v_states, v_params, steering)

def tireInit(t_params):
    return _pydof18.tireInit(t_params)

def tmxy_combined(f, fos, s, df0, sm, fm, ss, fs):
    return _pydof18.tmxy_combined(f, fos, s, df0, sm, fm, ss, fs)

def setTireParamsJSON(t_params, fileName):
    return _pydof18.setTireParamsJSON(t_params, fileName)

def computeTireLoads(loads, v_states, v_params, t_params):
    return _pydof18.computeTireLoads(loads, v_states, v_params, t_params)

def computeTireRHS(t_states, t_params, v_params, steering):
    return _pydof18.computeTireRHS(t_states, t_params, v_params, steering)

def computePowertrainRHS(v_states, tirelf_st, tirerf_st, tirelr_st, tirerr_st, v_params, t_params, controls):
    return _pydof18.computePowertrainRHS(v_states, tirelf_st, tirerf_st, tirelr_st, tirerr_st, v_params, t_params, controls)

def computeVehRHS(v_states, v_params, fx, fy):
    return _pydof18.computeVehRHS(v_states, v_params, fx, fy)
class d18SolverHalfImplicit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _pydof18.d18SolverHalfImplicit_swiginit(self, _pydof18.new_d18SolverHalfImplicit())
    __swig_destroy__ = _pydof18.delete_d18SolverHalfImplicit

    def Construct(self, *args):
        return _pydof18.d18SolverHalfImplicit_Construct(self, *args)

    def SetTimeStep(self, step):
        return _pydof18.d18SolverHalfImplicit_SetTimeStep(self, step)

    def GetEndT(self):
        return _pydof18.d18SolverHalfImplicit_GetEndT(self)

    def GetStep(self):
        return _pydof18.d18SolverHalfImplicit_GetStep(self)

    def GetDriverData(self):
        return _pydof18.d18SolverHalfImplicit_GetDriverData(self)

    def GetJacobianState(self):
        return _pydof18.d18SolverHalfImplicit_GetJacobianState(self)

    def GetJacobianControls(self):
        return _pydof18.d18SolverHalfImplicit_GetJacobianControls(self)

    def SetOutput(self, output_file, output_freq):
        return _pydof18.d18SolverHalfImplicit_SetOutput(self, output_file, output_freq)

    def Solve(self):
        return _pydof18.d18SolverHalfImplicit_Solve(self)

    def Initialize(self, vehicle_states, tire_states_LF, tire_states_RF, tire_states_LR, tire_states_RR):
        return _pydof18.d18SolverHalfImplicit_Initialize(self, vehicle_states, tire_states_LF, tire_states_RF, tire_states_LR, tire_states_RR)

    def IntegrateStep(self, t, throttle, steering, braking):
        return _pydof18.d18SolverHalfImplicit_IntegrateStep(self, t, throttle, steering, braking)

    def IntegrateStepWithJacobian(self, t, throttle, steering, braking, on):
        return _pydof18.d18SolverHalfImplicit_IntegrateStepWithJacobian(self, t, throttle, steering, braking, on)

    def WriteToFile(self):
        return _pydof18.d18SolverHalfImplicit_WriteToFile(self)
    m_veh_state = property(_pydof18.d18SolverHalfImplicit_m_veh_state_get, _pydof18.d18SolverHalfImplicit_m_veh_state_set)
    m_tirelf_state = property(_pydof18.d18SolverHalfImplicit_m_tirelf_state_get, _pydof18.d18SolverHalfImplicit_m_tirelf_state_set)
    m_tirerf_state = property(_pydof18.d18SolverHalfImplicit_m_tirerf_state_get, _pydof18.d18SolverHalfImplicit_m_tirerf_state_set)
    m_tirelr_state = property(_pydof18.d18SolverHalfImplicit_m_tirelr_state_get, _pydof18.d18SolverHalfImplicit_m_tirelr_state_set)
    m_tirerr_state = property(_pydof18.d18SolverHalfImplicit_m_tirerr_state_get, _pydof18.d18SolverHalfImplicit_m_tirerr_state_set)
    m_veh_param = property(_pydof18.d18SolverHalfImplicit_m_veh_param_get, _pydof18.d18SolverHalfImplicit_m_veh_param_set)
    m_tire_param = property(_pydof18.d18SolverHalfImplicit_m_tire_param_get, _pydof18.d18SolverHalfImplicit_m_tire_param_set)

# Register d18SolverHalfImplicit in _pydof18:
_pydof18.d18SolverHalfImplicit_swigregister(d18SolverHalfImplicit)



